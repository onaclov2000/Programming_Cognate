# This isn't necessarily useable python code, I just started putting things in here.

#wondering if one could find congnates between languages. and make it easier to transfer between.

# Shoot, a google translate from one lang to another (programming) would be pretty slick and maybe one day we can have that.

# right now I think that's called stack overflow ;)

c_sharp={"abstract","as","base","bool","break","byte","case","catch","char","checked","class","const","continue","decimal","default","delegate","do","double","else","enum","event","explicit","extern","false","finally","fixed","float","or","foreach","goto","if","implicit","in","int","interface","internal","is","lock","long","namespace","new","null","object","operator","out","override","params","private","protected","public","readonly","ref","return","sbyte","sealed","short","sizeof","stackalloc","static","string","struct","switch","this","throw","true","try","typeof","uint","ulong","unchecked","unsafe","ushort","using","virtual","void","volatile","while"};
python={"and","del","from","not","while","as","elif","global","or","with","assert","else","if","pass","yield","break","except","import","print","class","exec","in","raise","continue","finally","is","return","def","for","lambda","try"};
perl={"error"}; #Perl is just no fun there is a TON of stuff.
javascript={"break","case","catch","continue","debugger","default","delete","do","else","finally","for","function","if","in","instanceof","new","return","switch","this","throw","try","typeof","var","void","while","with"};
java={"abstract","continue","for","new","switch","assert","default","goto","package","synchronized","boolean","do","if","private","this","break","double","implements","protected","throw","byte","else","import","public","throws","case","enum","instanceof","return","transient","catch","extends","int","short","try","char","final","interface","static","void","class","finally","long","strictfp","volatile","const","float","native","super","while"};
c={"auto","break","case","char","const","continue","default","do","double","else","enum","extern","float","for","goto","if","int","long","register","return","short","signed","sizeof","static","struct","switch","typedef","union","unsigned","void","volatile","while"};
cpp = {"auto","const","double","float","int","short","struct","unsigned","break","continue","else","for","long","signed","switch","void","case","default","enum","goto","register","sizeof","typedef","volatile","char","do","extern","if","return","static","union","while","asm","dynamic_cast","namespace","reinterpret_cast","try","bool","explicit","new","static_cast","typeid","catch","false","operator","template","typename","class","friend","private","this","using","const_cast","inline","public","throw","virtual","delete","mutable","protected","true","wchar_t"}
ruby={"BEGIN","do","next","then","END","else","nil","true","alias","elsif","not","undef","and","end","or","unless","begin","ensure","redo","until","break","false","rescue","when","case","for","retry","while","class","if","return","while","def","in","self","__FILE__","defined?","module","super","__LINE__"};
vb = {"AddHandler","AddressOf","Alias","And","AndAlso","As","Boolean","ByRef","Byte","ByVal","Call","Case","Catch","CBool","CByte","CChar","CDate","CDbl","CDec","Char","CInt","Class Constraint","Class Statement","CLng","CObj","Const","Continue","CSByte","CShort","CSng","CStr","CType",,"CUInt","CULng","CUShort","Date","Decimal","Declare","Default","Delegate","Dim","DirectCast","Do","Double","Each","Else","ElseIf","End Statement","End <keyword>","EndIf","Enum","Erase","Error","Event","Exit","False","Finally","For (in For…Next)","For Each…Next","Friend","Function","Get","GetType","GetXMLNamespace","Global","GoSub","GoTo","Handles","If","If()","Implements","Implements Statement","Imports (.NET Namespace and Type)","Imports (XML Namespace)","In","In (Generic Modifier)","Inherits","Integer","Interface","Is","IsNot","Let","Lib","Like","Long","Loop","Me","Mod","Module","Module Statement","MustInherit","MustOverride","MyBase","MyClass","Namespace","Narrowing","New Constraint","New Operator","Next","Next (in Resume)","Not","Nothing","NotInheritable","NotOverridable","Object","Of","On","Operator","Option","OptionalOr","OrElse","Out (Generic Modifier)","Overloads","Overridable","Overrides","ParamArray","Partial","Private","Property","Protected","ublic","RaiseEvent","ReadOnly","ReDim","REM","RemoveHandler","Resume","Return","SByte","Select","Set","Shadows","Shared","Short","Single","Static","Step","Stop","String","Structure Constraint","Structure Statement","Sub","SyncLock","Then","Throw","To","True","Try","TryCast","TypeOf…Is","UInteger","ULong","UShort","Using","Variant","Wend","When","While","Widening","With","WithEvents","WriteOnly","Xor","#Const","#Else","#ElseIf","#End","#If","=","&","&=","*","*=","/","/=","\\","\=","^","^=","+","+=","-","-=",">> Operator (Visual Basic)",">>= Operator (Visual Basic)","<<","<<="}
ada = {"abort","else","new","return","abs","elsif","not","reverse","abstract","end","null","accept","entry","select","access","exception","of","separate","aliased","exit","or","some","all","others","subtype","and","for","out","synchronized","array","function","overriding","at","tagged","generic","package","task","begin","goto","pragma","terminate","body","private","then","if","procedure","type","case","in","protected","constant","interface","until","is","raise","use","declare","range","delay","limited","record","when","delta","loop","rem","while","digits","renames","with","do","mod","requeue","xor"}
tcl = {"after","append","array","auto_execok","auto_import","auto_load","auto_load_index","auto_qualify","binary","bgerror","break","catch","cd","clock","close","concat","continue","dde","default","else","elseif","encoding","eof","error","eval","exec","exit","expr","fblocked","fconfigure","fcopy","file","fileevent","flush","for","foreach","format","gets","glob","global","history",,"if","incr","info","interp","join","lappend","lindex","linsert","list","llength","load","lrange","lreplace","lsearch","lsort","namespace","open","package","pid","pkg_mkIndex","proc","puts","pwd","read","regexp","regsub","rename","resource","return","scan","seek","set","socket","source","split","string","subst","switch","tclLog","tell","time","trace","unknown","unset","update","uplevel","upvar","variable","vwait","while"}
